(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{408:function(e,t,n){"use strict";n.r(t);var s=n(56),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("ul",[n("li",[e._v("禁用菜单右键菜单")])]),e._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[e._v("mxEvent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("disableContextMenu")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("container"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("ul",[n("li",[e._v("激活平移")])]),e._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[e._v("graph"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("setPanning")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("ul",[n("li",[e._v("使用左键平移")])]),e._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[e._v("graph"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("panningHandler"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("useLeftButtonForPanning "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("ul",[n("li",[e._v("指定图形是否允许任何交互。 此实现启用了更新。")])]),e._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[e._v("graph"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("setEnabled")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("ul",[n("li",[e._v("是否允许改变元素大小")])]),e._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[e._v("graph"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("setCellsResizable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("ul",[n("li",[e._v("是否可移动")])]),e._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[e._v("graph"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("setCellsMovable")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("ul",[n("li",[e._v("连线是否允许没有连接节点")])]),e._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[e._v("graph"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("setAllowDanglingEdges")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("ul",[n("li",[e._v("容器大小自适应")])]),e._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[e._v("graph"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("setResizeContainer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("ul",[n("li",[e._v("清除选择")])]),e._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[e._v("graph"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("clearSelection")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("ul",[n("li",[e._v("启用框选")])]),e._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("mxRubberband")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("graph"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("mxGraph\tExtends mxEventSource to implement a graph component for the browser.\nEvents\nmxEvent.ROOT\tFires if the root in the model has changed.\nmxEvent.ALIGN_CELLS\tFires between begin- and endUpdate in alignCells.\nmxEvent.FLIP_EDGE\tFires between begin- and endUpdate in flipEdge.\nmxEvent.ORDER_CELLS\tFires between begin- and endUpdate in orderCells.\nmxEvent.CELLS_ORDERED\tFires between begin- and endUpdate in cellsOrdered.\nmxEvent.GROUP_CELLS\tFires between begin- and endUpdate in groupCells.\nmxEvent.UNGROUP_CELLS\tFires between begin- and endUpdate in ungroupCells.\nmxEvent.REMOVE_CELLS_FROM_PARENT\tFires between begin- and endUpdate in removeCellsFromParent.\nmxEvent.ADD_CELLS\tFires between begin- and endUpdate in addCells.\nmxEvent.CELLS_ADDED\tFires between begin- and endUpdate in cellsAdded.\nmxEvent.REMOVE_CELLS\tFires between begin- and endUpdate in removeCells.\nmxEvent.CELLS_REMOVED\tFires between begin- and endUpdate in cellsRemoved.\nmxEvent.SPLIT_EDGE\tFires between begin- and endUpdate in splitEdge.\nmxEvent.TOGGLE_CELLS\tFires between begin- and endUpdate in toggleCells.\nmxEvent.FOLD_CELLS\tFires between begin- and endUpdate in foldCells.\nmxEvent.CELLS_FOLDED\tFires between begin- and endUpdate in cellsFolded.\nmxEvent.UPDATE_CELL_SIZE\tFires between begin- and endUpdate in updateCellSize.\nmxEvent.RESIZE_CELLS\tFires between begin- and endUpdate in resizeCells.\nmxEvent.CELLS_RESIZED\tFires between begin- and endUpdate in cellsResized.\nmxEvent.MOVE_CELLS\tFires between begin- and endUpdate in moveCells.\nmxEvent.CELLS_MOVED\tFires between begin- and endUpdate in cellsMoved.\nmxEvent.CONNECT_CELL\tFires between begin- and endUpdate in connectCell.\nmxEvent.CELL_CONNECTED\tFires between begin- and endUpdate in cellConnected.\nmxEvent.REFRESH\tFires after refresh was executed.\nmxEvent.CLICK\tFires in click after a click event.\nmxEvent.DOUBLE_CLICK\tFires in dblClick after a double click.\nmxEvent.GESTURE\tFires in fireGestureEvent after a touch gesture.\nmxEvent.TAP_AND_HOLD\tFires in tapAndHold if a tap and hold event was detected.\nmxEvent.FIRE_MOUSE_EVENT\tFires in fireMouseEvent before the mouse listeners are invoked.\nmxEvent.SIZE\tFires after sizeDidChange was executed.\nmxEvent.START_EDITING\tFires before the in-place editor starts in startEditingAtCell.\nmxEvent.EDITING_STARTED\tFires after the in-place editor starts in startEditingAtCell.\nmxEvent.EDITING_STOPPED\tFires after the in-place editor stops in stopEditing.\nmxEvent.LABEL_CHANGED\tFires between begin- and endUpdate in cellLabelChanged.\nmxEvent.ADD_OVERLAY\tFires after an overlay is added in addCellOverlay.\nmxEvent.REMOVE_OVERLAY\tFires after an overlay is removed in removeCellOverlay and removeCellOverlays.\nmxGraph\tConstructs a new mxGraph in the specified container.\nVariables\nmouseListeners\tHolds the mouse event listeners.\nisMouseDown\tHolds the state of the mouse button.\nmodel\tHolds the mxGraphModel that contains the cells to be displayed.\nview\tHolds the mxGraphView that caches the mxCellStates for the cells.\nstylesheet\tHolds the mxStylesheet that defines the appearance of the cells.\nselectionModel\tHolds the mxGraphSelectionModel that models the current selection.\ncellEditor\tHolds the mxCellEditor that is used as the in-place editing.\ncellRenderer\tHolds the mxCellRenderer for rendering the cells in the graph.\nmultiplicities\tAn array of mxMultiplicities describing the allowed connections in a graph.\nrenderHint\tRenderHint as it was passed to the constructor.\ndialect\tDialect to be used for drawing the graph.\ngridSize\tSpecifies the grid size.\ngridEnabled\tSpecifies if the grid is enabled.\nportsEnabled\tSpecifies if ports are enabled.\nnativeDoubleClickEnabled\tSpecifies if native double click events should be detected.\ndoubleTapEnabled\tSpecifies if double taps on touch-based devices should be handled as a double click.\ndoubleTapTimeout\tSpecifies the timeout for double taps and non-native double clicks.\ndoubleTapTolerance\tSpecifies the tolerance for double taps and double clicks in quirks mode.\nlastTouchX\tHolds the x-coordinate of the last touch event for double tap detection.\nlastTouchX\tHolds the y-coordinate of the last touch event for double tap detection.\nlastTouchTime\tHolds the time of the last touch event for double click detection.\ntapAndHoldEnabled\tSpecifies if tap and hold should be used for starting connections on touch-based devices.\ntapAndHoldDelay\tSpecifies the time for a tap and hold.\ntapAndHoldInProgress\tTrue if the timer for tap and hold events is running.\ntapAndHoldValid\tTrue as long as the timer is running and the touch events stay within the given <tapAndHoldTolerance>.\ninitialTouchX\tHolds the x-coordinate of the intial touch event for tap and hold.\ninitialTouchY\tHolds the y-coordinate of the intial touch event for tap and hold.\ntolerance\tTolerance for a move to be handled as a single click.\ndefaultOverlap\tValue returned by getOverlap if isAllowOverlapParent returns true for the given cell.\ndefaultParent\tSpecifies the default parent to be used to insert new cells.\nalternateEdgeStyle\tSpecifies the alternate edge style to be used if the main control point on an edge is being doubleclicked.\nbackgroundImage\tSpecifies the mxImage to be returned by getBackgroundImage.\npageVisible\tSpecifies if the background page should be visible.\npageBreaksVisible\tSpecifies if a dashed line should be drawn between multiple pages.\npageBreakColor\tSpecifies the color for page breaks.\npageBreakDashed\tSpecifies the page breaks should be dashed.\nminPageBreakDist\tSpecifies the minimum distance for page breaks to be visible.\npreferPageSize\tSpecifies if the graph size should be rounded to the next page number in sizeDidChange.\npageFormat\tSpecifies the page format for the background page.\npageScale\tSpecifies the scale of the background page.\nenabled\tSpecifies the return value for isEnabled.\nescapeEnabled\tSpecifies if mxKeyHandler should invoke escape when the escape key is pressed.\ninvokesStopCellEditing\tIf true, when editing is to be stopped by way of selection changing, data in diagram changing or other means stopCellEditing is invoked, and changes are saved.\nenterStopsCellEditing\tIf true, pressing the enter key without pressing control or shift will stop editing and accept the new value.\nuseScrollbarsForPanning\tSpecifies if scrollbars should be used for panning in panGraph if any scrollbars are available.\nexportEnabled\tSpecifies the return value for canExportCell.\nimportEnabled\tSpecifies the return value for canImportCell.\ncellsLocked\tSpecifies the return value for isCellLocked.\ncellsCloneable\tSpecifies the return value for isCellCloneable.\nfoldingEnabled\tSpecifies if folding (collapse and expand via an image icon in the graph should be enabled).\ncellsEditable\tSpecifies the return value for isCellEditable.\ncellsDeletable\tSpecifies the return value for isCellDeletable.\ncellsMovable\tSpecifies the return value for isCellMovable.\nedgeLabelsMovable\tSpecifies the return value for edges in isLabelMovable.\nvertexLabelsMovable\tSpecifies the return value for vertices in isLabelMovable.\ndropEnabled\tSpecifies the return value for isDropEnabled.\nsplitEnabled\tSpecifies if dropping onto edges should be enabled.\ncellsResizable\tSpecifies the return value for isCellResizable.\ncellsBendable\tSpecifies the return value for isCellsBendable.\ncellsSelectable\tSpecifies the return value for isCellSelectable.\ncellsDisconnectable\tSpecifies the return value for <isCellDisconntable>.\nautoSizeCells\tSpecifies if the graph should automatically update the cell size after an edit.\nautoSizeCellsOnAdd\tSpecifies if autoSize style should be applied when cells are added.\nautoScroll\tSpecifies if the graph should automatically scroll if the mouse goes near the container edge while dragging.\nignoreScrollbars\tSpecifies if the graph should automatically scroll regardless of the scrollbars.\ntranslateToScrollPosition\tSpecifies if the graph should automatically convert the current scroll position to a translate in the graph view when a mouseUp event is received.\ntimerAutoScroll\tSpecifies if autoscrolling should be carried out via mxPanningManager even if the container has scrollbars.\nallowAutoPanning\tSpecifies if panning via panGraph should be allowed to implement autoscroll if no scrollbars are available in scrollPointToVisible.\nautoExtend\tSpecifies if the size of the graph should be automatically extended if the mouse goes near the container edge while dragging.\nmaximumGraphBounds\tmxRectangle that specifies the area in which all cells in the diagram should be placed.\nminimumGraphSize\tmxRectangle that specifies the minimum size of the graph.\nminimumContainerSize\tmxRectangle that specifies the minimum size of the <container> if resizeContainer is true.\nmaximumContainerSize\tmxRectangle that specifies the maximum size of the container if resizeContainer is true.\nresizeContainer\tSpecifies if the container should be resized to the graph size when the graph size has changed.\nborder\tBorder to be added to the bottom and right side when the container is being resized after the graph has been changed.\nkeepEdgesInForeground\tSpecifies if edges should appear in the foreground regardless of their order in the model.\nkeepEdgesInBackground\tSpecifies if edges should appear in the background regardless of their order in the model.\nallowNegativeCoordinates\tSpecifies if negative coordinates for vertices are allowed.\nconstrainChildren\tSpecifies if a child should be constrained inside the parent bounds after a move or resize of the child.\nconstrainRelativeChildren\tSpecifies if child cells with relative geometries should be constrained inside the parent bounds, if constrainChildren is true, and/or the maximumGraphBounds.\nextendParents\tSpecifies if a parent should contain the child bounds after a resize of the child.\nextendParentsOnAdd\tSpecifies if parents should be extended according to the extendParents switch if cells are added.\nextendParentsOnAdd\tSpecifies if parents should be extended according to the extendParents switch if cells are added.\nrecursiveResize\tSpecifies the return value for isRecursiveResize.\ncollapseToPreferredSize\tSpecifies if the cell size should be changed to the preferred size when a cell is first collapsed.\nzoomFactor\tSpecifies the factor used for zoomIn and zoomOut.\nkeepSelectionVisibleOnZoom\tSpecifies if the viewport should automatically contain the selection cells after a zoom operation.\ncenterZoom\tSpecifies if the zoom operations should go into the center of the actual diagram rather than going from top, left.\nresetViewOnRootChange\tSpecifies if the scale and translate should be reset if the root changes in the model.\nresetEdgesOnResize\tSpecifies if edge control points should be reset after the resize of a connected cell.\nresetEdgesOnMove\tSpecifies if edge control points should be reset after the move of a connected cell.\nresetEdgesOnConnect\tSpecifies if edge control points should be reset after the the edge has been reconnected.\nallowLoops\tSpecifies if loops (aka self-references) are allowed.\ndefaultLoopStyle\tmxEdgeStyle to be used for loops.\nmultigraph\tSpecifies if multiple edges in the same direction between the same pair of vertices are allowed.\nconnectableEdges\tSpecifies if edges are connectable.\nallowDanglingEdges\tSpecifies if edges with disconnected terminals are allowed in the graph.\ncloneInvalidEdges\tSpecifies if edges that are cloned should be validated and only inserted if they are valid.\ndisconnectOnMove\tSpecifies if edges should be disconnected from their terminals when they are moved.\nlabelsVisible\tSpecifies if labels should be visible.\nhtmlLabels\tSpecifies the return value for isHtmlLabel.\nswimlaneSelectionEnabled\tSpecifies if swimlanes should be selectable via the content if the mouse is released.\nswimlaneNesting\tSpecifies if nesting of swimlanes is allowed.\nswimlaneIndicatorColorAttribute\tThe attribute used to find the color for the indicator if the indicator color is set to ‘swimlane’.\nimageBundles\tHolds the list of image bundles.\nminFitScale\tSpecifies the minimum scale to be applied in fit.\nmaxFitScale\tSpecifies the maximum scale to be applied in fit.\npanDx\tCurrent horizontal panning value.\npanDy\tCurrent vertical panning value.\ncollapsedImage\tSpecifies the mxImage to indicate a collapsed state.\nexpandedImage\tSpecifies the mxImage to indicate a expanded state.\nwarningImage\tSpecifies the mxImage for the image to be used to display a warning overlay.\nalreadyConnectedResource\tSpecifies the resource key for the error message to be displayed in non-multigraphs when two vertices are already connected.\ncontainsValidationErrorsResource\tSpecifies the resource key for the warning message to be displayed when a collapsed cell contains validation errors.\ncollapseExpandResource\tSpecifies the resource key for the tooltip on the collapse/expand icon.\ninit\tInitializes the <container> and creates the respective datastructures.\ncreateHandlers\tCreates the tooltip-, panning-, connection- and graph-handler (in this order).\ncreateTooltipHandler\tCreates and returns a new mxTooltipHandler to be used in this graph.\ncreateSelectionCellsHandler\tCreates and returns a new mxTooltipHandler to be used in this graph.\ncreateConnectionHandler\tCreates and returns a new mxConnectionHandler to be used in this graph.\ncreateGraphHandler\tCreates and returns a new mxGraphHandler to be used in this graph.\ncreatePanningHandler\tCreates and returns a new mxPanningHandler to be used in this graph.\ncreatePopupMenuHandler\tCreates and returns a new mxPopupMenuHandler to be used in this graph.\ncreateSelectionModel\tCreates a new mxGraphSelectionModel to be used in this graph.\ncreateStylesheet\tCreates a new mxGraphSelectionModel to be used in this graph.\ncreateGraphView\tCreates a new mxGraphView to be used in this graph.\ncreateCellRenderer\tCreates a new mxCellRenderer to be used in this graph.\ncreateCellEditor\tCreates a new mxCellEditor to be used in this graph.\ngetModel\tReturns the mxGraphModel that contains the cells.\ngetView\tReturns the mxGraphView that contains the mxCellStates.\ngetStylesheet\tReturns the mxStylesheet that defines the style.\nsetStylesheet\tSets the mxStylesheet that defines the style.\ngetSelectionModel\tReturns the mxGraphSelectionModel that contains the selection.\nsetSelectionModel\tSets the <mxSelectionModel> that contains the selection.\ngetSelectionCellsForChanges\tReturns the cells to be selected for the given array of changes.\ngraphModelChanged\tCalled when the graph model changes.\nupdateSelection\tRemoves selection cells that are not in the model from the selection.\nprocessChange\tProcesses the given change and invalidates the respective cached data in view.\nremoveStateForCell\tRemoves all cached information for the given cell and its descendants.\nOverlays\naddCellOverlay\tAdds an mxCellOverlay for the specified cell.\ngetCellOverlays\tReturns the array of mxCellOverlays for the given cell or null, if no overlays are defined.\nremoveCellOverlay\tRemoves and returns the given mxCellOverlay from the given cell.\nremoveCellOverlays\tRemoves all mxCellOverlays from the given cell.\nclearCellOverlays\tRemoves all mxCellOverlays in the graph for the given cell and all its descendants.\nsetCellWarning\tCreates an overlay for the given cell using the warning and image or warningImage and returns the new mxCellOverlay.\nIn-place editing\nstartEditing\tCalls startEditingAtCell using the given cell or the first selection cell.\nstartEditingAtCell\tFires a startEditing event and invokes mxCellEditor.startEditing on <editor>.\ngetEditingValue\tReturns the initial value for in-place editing.\nstopEditing\tStops the current editing and fires a <editingStopped> event.\nlabelChanged\tSets the label of the specified cell to the given value using cellLabelChanged and fires mxEvent.LABEL_CHANGED while the transaction is in progress.\ncellLabelChanged\tSets the new label for a cell.\nEvent processing\nescape\tProcesses an escape keystroke.\nclick\tProcesses a singleclick on an optional cell and fires a click event.\nisSiblingSelected\tReturns true if any sibling of the given cell is selected.\ndblClick\tProcesses a doubleclick on an optional cell and fires a <dblclick> event.\ntapAndHold\tHandles the mxMouseEvent by highlighting the mxCellState.\nscrollPointToVisible\tScrolls the graph to the given point, extending the graph container if specified.\ncreatePanningManager\tCreates and returns an mxPanningManager.\ngetBorderSizes\tReturns the size of the border and padding on all four sides of the container.\ngetPreferredPageSize\tReturns the preferred size of the background page if preferPageSize is true.\nfit\tScales the graph such that the complete diagram fits into <container> and returns the current scale in the view.\nsizeDidChange\tCalled when the size of the graph has changed.\ndoResizeContainer\tResizes the container for the given graph width and height.\nupdatePageBreaks\tInvokes from sizeDidChange to redraw the page breaks.\nCell styles\ngetCurrentCellStyle\tReturns the style for the given cell from the cell state, if one exists, or using getCellStyle.\ngetCellStyle\tReturns an array of key, value pairs representing the cell style for the given cell.\npostProcessCellStyle\tTries to resolve the value for the image style in the image bundles and turns short data URIs as defined in mxImageBundle to data URIs as defined in RFC 2397 of the IETF.\nsetCellStyle\tSets the style of the specified cells.\ntoggleCellStyle\tToggles the boolean value for the given key in the style of the given cell and returns the new value as 0 or 1.\ntoggleCellStyles\tToggles the boolean value for the given key in the style of the given cells and returns the new value as 0 or 1.\nsetCellStyles\tSets the key to value in the styles of the given cells.\ntoggleCellStyleFlags\tToggles the given bit for the given key in the styles of the specified cells.\nsetCellStyleFlags\tSets or toggles the given bit for the given key in the styles of the specified cells.\nCell alignment and orientation\nalignCells\tAligns the given cells vertically or horizontally according to the given alignment using the optional parameter as the coordinate.\nflipEdge\tToggles the style of the given edge between null (or empty) and alternateEdgeStyle.\naddImageBundle\tAdds the specified mxImageBundle.\nremoveImageBundle\tRemoves the specified mxImageBundle.\ngetImageFromBundles\tSearches all imageBundles for the specified key and returns the value for the first match or null if the key is not found.\nOrder\norderCells\tMoves the given cells to the front or back.\ncellsOrdered\tMoves the given cells to the front or back.\nGrouping\ngroupCells\tAdds the cells into the given group.\ngetCellsForGroup\tReturns the cells with the same parent as the first cell in the given array.\ngetBoundsForGroup\tReturns the bounds to be used for the given group and children.\ncreateGroupCell\tHook for creating the group cell to hold the given array of mxCells if no group cell was given to the <group> function.\nungroupCells\tUngroups the given cells by moving the children the children to their parents parent and removing the empty groups.\ngetCellsForUngroup\tReturns the selection cells that can be ungrouped.\nremoveCellsAfterUngroup\tHook to remove the groups after ungroupCells.\nremoveCellsFromParent\tRemoves the specified cells from their parents and adds them to the default parent.\nupdateGroupBounds\tUpdates the bounds of the given groups to include all children and returns the passed-in cells.\ngetBoundingBox\tReturns the bounding box for the given array of mxCells.\nCell cloning, insertion and removal\ncloneCell\tReturns the clone for the given cell.\ncloneCells\tReturns the clones for the given cells.\ninsertVertex\tAdds a new vertex into the given parent mxCell using value as the user object and the given coordinates as the mxGeometry of the new vertex.\ncreateVertex\tHook method that creates the new vertex for insertVertex.\ninsertEdge\tAdds a new edge into the given parent mxCell using value as the user object and the given source and target as the terminals of the new edge.\ncreateEdge\tHook method that creates the new edge for insertEdge.\naddEdge\tAdds the edge to the parent and connects it to the given source and target terminals.\naddCell\tAdds the cell to the parent and connects it to the given source and target terminals.\naddCells\tAdds the cells to the parent at the given index, connecting each cell to the optional source and target terminal.\ncellsAdded\tAdds the specified cells to the given parent.\nautoSizeCell\tResizes the specified cell to just fit around the its label and/or children\nremoveCells\tRemoves the given cells from the graph including all connected edges if includeEdges is true.\ncellsRemoved\tRemoves the given cells from the model.\nsplitEdge\tSplits the given edge by adding the newEdge between the previous source and the given cell and reconnecting the source of the given edge to the given cell.\nCell visibility\ntoggleCells\tSets the visible state of the specified cells and all connected edges if includeEdges is true.\ncellsToggled\tSets the visible state of the specified cells.\nFolding\nfoldCells\tSets the collapsed state of the specified cells and all descendants if recurse is true.\ncellsFolded\tSets the collapsed state of the specified cells.\nswapBounds\tSwaps the alternate and the actual bounds in the geometry of the given cell invoking updateAlternateBounds before carrying out the swap.\nupdateAlternateBounds\tUpdates or sets the alternate bounds in the given geometry for the given cell depending on whether the cell is going to be collapsed.\naddAllEdges\tReturns an array with the given cells and all edges that are connected to a cell or one of its descendants.\ngetAllEdges\tReturns all edges connected to the given cells or its descendants.\nCell sizing\nupdateCellSize\tUpdates the size of the given cell in the model using cellSizeUpdated.\ncellSizeUpdated\tUpdates the size of the given cell in the model using getPreferredSizeForCell to get the new size.\ngetPreferredSizeForCell\tReturns the preferred width and height of the given mxCell as an mxRectangle.\nresizeCell\tSets the bounds of the given cell using resizeCells.\nresizeCells\tSets the bounds of the given cells and fires a mxEvent.RESIZE_CELLS event while the transaction is in progress.\ncellsResized\tSets the bounds of the given cells and fires a mxEvent.CELLS_RESIZED event.\ncellResized\tResizes the parents recursively so that they contain the complete area of the resized child cell.\nresizeChildCells\tResizes the child cells of the given cell for the given new geometry with respect to the current geometry of the cell.\nconstrainChildCells\tConstrains the children of the given cell using constrainChild.\nscaleCell\tScales the points, position and size of the given cell according to the given vertical and horizontal scaling factors.\nextendParent\tResizes the parents recursively so that they contain the complete area of the resized child cell.\nCell moving\nimportCells\tClones and inserts the given cells into the graph using the move method and returns the inserted cells.\nmoveCells\tMoves or clones the specified cells and moves the cells or clones by the given amount, adding them to the optional target cell.\ncellsMoved\tMoves the specified cells by the given vector, disconnecting the cells using disconnectGraph is disconnect is true.\ntranslateCell\tTranslates the geometry of the given cell and stores the new, translated geometry in the model as an atomic change.\ngetCellContainmentArea\tReturns the mxRectangle inside which a cell is to be kept.\ngetMaximumGraphBounds\tReturns the bounds inside which the diagram should be kept as an mxRectangle.\nconstrainChild\tKeeps the given cell inside the bounds returned by getCellContainmentArea for its parent, according to the rules defined by getOverlap and isConstrainChild.\nresetEdges\tResets the control points of the edges that are connected to the given cells if not both ends of the edge are in the given cells array.\nresetEdge\tResets the control points of the given edge.\nCell connecting and connection constraints\ngetOutlineConstraint\tReturns the constraint used to connect to the outline of the given state.\ngetAllConnectionConstraints\tReturns an array of all mxConnectionConstraints for the given terminal.\ngetConnectionConstraint\tReturns an mxConnectionConstraint that describes the given connection point.\nsetConnectionConstraint\tSets the mxConnectionConstraint that describes the given connection point.\ngetConnectionPoint\tReturns the nearest point in the list of absolute points or the center of the opposite terminal.\nconnectCell\tConnects the specified end of the given edge to the given terminal using cellConnected and fires mxEvent.CONNECT_CELL while the transaction is in progress.\ncellConnected\tSets the new terminal for the given edge and resets the edge points if resetEdgesOnConnect is true.\ndisconnectGraph\tDisconnects the given edges from the terminals which are not in the given array.\nDrilldown\ngetCurrentRoot\tReturns the current root of the displayed cell hierarchy.\ngetTranslateForRoot\tReturns the translation to be used if the given cell is the root cell as an mxPoint.\nisPort\tReturns true if the given cell is a “port”, that is, when connecting to it, the cell returned by getTerminalForPort should be used as the terminal and the port should be referenced by the ID in either the mxConstants.STYLE_SOURCE_PORT or the or the mxConstants.STYLE_TARGET_PORT.\ngetTerminalForPort\tReturns the terminal to be used for a given port.\ngetChildOffsetForCell\tReturns the offset to be used for the cells inside the given cell.\nenterGroup\tUses the given cell as the root of the displayed cell hierarchy.\nexitGroup\tChanges the current root to the next valid root in the displayed cell hierarchy.\nhome\tUses the root of the model as the root of the displayed cell hierarchy and selects the previous root.\nisValidRoot\tReturns true if the given cell is a valid root for the cell display hierarchy.\nGraph display\ngetGraphBounds\tReturns the bounds of the visible graph.\ngetCellBounds\tReturns the scaled, translated bounds for the given cell.\ngetBoundingBoxFromGeometry\tReturns the bounding box for the geometries of the vertices in the given array of cells.\nrefresh\tClears all cell states or the states for the hierarchy starting at the given cell and validates the graph.\nsnap\tSnaps the given numeric value to the grid if gridEnabled is true.\nsnapDelta\tSnaps the given delta with the given scaled bounds.\npanGraph\tShifts the graph display by the given amount.\nzoomIn\tZooms into the graph by zoomFactor.\nzoomOut\tZooms out of the graph by zoomFactor.\nzoomActual\tResets the zoom and panning in the view.\nzoomTo\tZooms the graph to the given scale with an optional boolean center argument, which is passd to zoom.\ncenter\tCenters the graph in the container.\nzoom\tZooms the graph using the given factor.\nzoomToRect\tZooms the graph to the specified rectangle.\nscrollCellToVisible\tPans the graph so that it shows the given cell.\nscrollRectToVisible\tPans the graph so that it shows the given rectangle.\ngetCellGeometry\tReturns the mxGeometry for the given cell.\nisCellVisible\tReturns true if the given cell is visible in this graph.\nisCellCollapsed\tReturns true if the given cell is collapsed in this graph.\nisCellConnectable\tReturns true if the given cell is connectable in this graph.\nisOrthogonal\tReturns true if perimeter points should be computed such that the resulting edge has only horizontal or vertical segments.\nisLoop\tReturns true if the given cell state is a loop.\nisCloneEvent\tReturns true if the given event is a clone event.\nisTransparentClickEvent\tHook for implementing click-through behaviour on selected cells.\nisToggleEvent\tReturns true if the given event is a toggle event.\nisGridEnabledEvent\tReturns true if the given mouse event should be aligned to the grid.\nisConstrainedEvent\tReturns true if the given mouse event should be aligned to the grid.\nisIgnoreTerminalEvent\tReturns true if the given mouse event should not allow any connections to be made.\nValidation\nvalidationAlert\tDisplays the given validation error in a dialog.\nisEdgeValid\tChecks if the return value of getEdgeValidationError for the given arguments is null.\ngetEdgeValidationError\tReturns the validation error message to be displayed when inserting or changing an edges’ connectivity.\nvalidateEdge\tHook method for subclassers to return an error message for the given edge and terminals.\nvalidateGraph\tValidates the graph by validating each descendant of the given cell or the root of the model.\ngetCellValidationError\tChecks all multiplicities that cannot be enforced while the graph is being modified, namely, all multiplicities that require a minimum of 1 edge.\nvalidateCell\tHook method for subclassers to return an error message for the given cell and validation context.\nGraph appearance\ngetBackgroundImage\tReturns the backgroundImage as an mxImage.\nsetBackgroundImage\tSets the new backgroundImage.\ngetFoldingImage\tReturns the mxImage used to display the collapsed state of the specified cell state.\nconvertValueToString\tReturns the textual representation for the given cell.\ngetLabel\tReturns a string or DOM node that represents the label for the given cell.\nisHtmlLabel\tReturns true if the label must be rendered as HTML markup.\nisHtmlLabels\tReturns htmlLabels.\nsetHtmlLabels\tSets htmlLabels.\nisWrapping\tThis enables wrapping for HTML labels.\nisLabelClipped\tReturns true if the overflow portion of labels should be hidden.\ngetTooltip\tReturns the string or DOM node that represents the tooltip for the given state, node and coordinate pair.\ngetTooltipForCell\tReturns the string or DOM node to be used as the tooltip for the given cell.\ngetLinkForCell\tReturns the string to be used as the link for the given cell.\ngetCursorForMouseEvent\tReturns the cursor value to be used for the CSS of the shape for the given event.\ngetCursorForCell\tReturns the cursor value to be used for the CSS of the shape for the given cell.\ngetStartSize\tReturns the start size of the given swimlane, that is, the width or height of the part that contains the title, depending on the horizontal style.\ngetSwimlaneDirection\tReturns the direction for the given swimlane style.\ngetActualStartSize\tReturns the actual start size of the given swimlane taking into account direction and horizontal and vertial flip styles.\ngetImage\tReturns the image URL for the given cell state.\nisTransparentState\tReturns true if the given state has no stroke- or fillcolor and no image.\ngetVerticalAlign\tReturns the vertical alignment for the given cell state.\ngetIndicatorColor\tReturns the indicator color for the given cell state.\ngetIndicatorGradientColor\tReturns the indicator gradient color for the given cell state.\ngetIndicatorShape\tReturns the indicator shape for the given cell state.\ngetIndicatorImage\tReturns the indicator image for the given cell state.\ngetBorder\tReturns the value of border.\nsetBorder\tSets the value of border.\nisSwimlane\tReturns true if the given cell is a swimlane in the graph.\nGraph behaviour\nisResizeContainer\tReturns resizeContainer.\nsetResizeContainer\tSets resizeContainer.\nisEnabled\tReturns true if the graph is enabled.\nsetEnabled\tSpecifies if the graph should allow any interactions.\nisEscapeEnabled\tReturns escapeEnabled.\nsetEscapeEnabled\tSets escapeEnabled.\nisInvokesStopCellEditing\tReturns invokesStopCellEditing.\nsetInvokesStopCellEditing\tSets invokesStopCellEditing.\nisEnterStopsCellEditing\tReturns enterStopsCellEditing.\nsetEnterStopsCellEditing\tSets enterStopsCellEditing.\nisCellLocked\tReturns true if the given cell may not be moved, sized, bended, disconnected, edited or selected.\nisCellsLocked\tReturns true if the given cell may not be moved, sized, bended, disconnected, edited or selected.\nsetCellsLocked\tSets if any cell may be moved, sized, bended, disconnected, edited or selected.\ngetCloneableCells\tReturns the cells which may be exported in the given array of cells.\nisCellCloneable\tReturns true if the given cell is cloneable.\nisCellsCloneable\tReturns cellsCloneable, that is, if the graph allows cloning of cells by using control-drag.\nsetCellsCloneable\tSpecifies if the graph should allow cloning of cells by holding down the control key while cells are being moved.\ngetExportableCells\tReturns the cells which may be exported in the given array of cells.\ncanExportCell\tReturns true if the given cell may be exported to the clipboard.\ngetImportableCells\tReturns the cells which may be imported in the given array of cells.\ncanImportCell\tReturns true if the given cell may be imported from the clipboard.\nisCellSelectable\tReturns true if the given cell is selectable.\nisCellsSelectable\tReturns cellsSelectable.\nsetCellsSelectable\tSets cellsSelectable.\ngetDeletableCells\tReturns the cells which may be exported in the given array of cells.\nisCellDeletable\tReturns true if the given cell is moveable.\nisCellsDeletable\tReturns cellsDeletable.\nsetCellsDeletable\tSets cellsDeletable.\nisLabelMovable\tReturns true if the given edges’s label is moveable.\nisCellRotatable\tReturns true if the given cell is rotatable.\ngetMovableCells\tReturns the cells which are movable in the given array of cells.\nisCellMovable\tReturns true if the given cell is moveable.\nisCellsMovable\tReturns cellsMovable.\nsetCellsMovable\tSpecifies if the graph should allow moving of cells.\nisGridEnabled\tReturns gridEnabled as a boolean.\nsetGridEnabled\tSpecifies if the grid should be enabled.\nisPortsEnabled\tReturns portsEnabled as a boolean.\nsetPortsEnabled\tSpecifies if the ports should be enabled.\ngetGridSize\tReturns gridSize.\nsetGridSize\tSets gridSize.\ngetTolerance\tReturns tolerance.\nsetTolerance\tSets tolerance.\nisVertexLabelsMovable\tReturns vertexLabelsMovable.\nsetVertexLabelsMovable\tSets vertexLabelsMovable.\nisEdgeLabelsMovable\tReturns edgeLabelsMovable.\nisEdgeLabelsMovable\tSets edgeLabelsMovable.\nisSwimlaneNesting\tReturns swimlaneNesting as a boolean.\nsetSwimlaneNesting\tSpecifies if swimlanes can be nested by drag and drop.\nisSwimlaneSelectionEnabled\tReturns swimlaneSelectionEnabled as a boolean.\nsetSwimlaneSelectionEnabled\tSpecifies if swimlanes should be selected if the mouse is released over their content area.\nisMultigraph\tReturns multigraph as a boolean.\nsetMultigraph\tSpecifies if the graph should allow multiple connections between the same pair of vertices.\nisAllowLoops\tReturns allowLoops as a boolean.\nsetAllowDanglingEdges\tSpecifies if dangling edges are allowed, that is, if edges are allowed that do not have a source and/or target terminal defined.\nisAllowDanglingEdges\tReturns allowDanglingEdges as a boolean.\nsetConnectableEdges\tSpecifies if edges should be connectable.\nisConnectableEdges\tReturns connectableEdges as a boolean.\nsetCloneInvalidEdges\tSpecifies if edges should be inserted when cloned but not valid wrt.\nisCloneInvalidEdges\tReturns cloneInvalidEdges as a boolean.\nsetAllowLoops\tSpecifies if loops are allowed.\nisDisconnectOnMove\tReturns disconnectOnMove as a boolean.\nsetDisconnectOnMove\tSpecifies if edges should be disconnected when moved.\nisDropEnabled\tReturns dropEnabled as a boolean.\nsetDropEnabled\tSpecifies if the graph should allow dropping of cells onto or into other cells.\nisSplitEnabled\tReturns splitEnabled as a boolean.\nsetSplitEnabled\tSpecifies if the graph should allow dropping of cells onto or into other cells.\nisCellResizable\tReturns true if the given cell is resizable.\nisCellsResizable\tReturns cellsResizable.\nsetCellsResizable\tSpecifies if the graph should allow resizing of cells.\nisTerminalPointMovable\tReturns true if the given terminal point is movable.\nisCellBendable\tReturns true if the given cell is bendable.\nisCellsBendable\tReturns <cellsBenadable>.\nsetCellsBendable\tSpecifies if the graph should allow bending of edges.\nisCellEditable\tReturns true if the given cell is editable.\nisCellsEditable\tReturns cellsEditable.\nsetCellsEditable\tSpecifies if the graph should allow in-place editing for cell labels.\nisCellDisconnectable\tReturns true if the given cell is disconnectable from the source or target terminal.\nisCellsDisconnectable\tReturns cellsDisconnectable.\nsetCellsDisconnectable\tSets cellsDisconnectable.\nisValidSource\tReturns true if the given cell is a valid source for new connections.\nisValidTarget\tReturns isValidSource for the given cell.\nisValidConnection\tReturns true if the given target cell is a valid target for source.\nsetConnectable\tSpecifies if the graph should allow new connections.\nisConnectable\tReturns true if the <connectionHandler> is enabled.\nsetTooltips\tSpecifies if tooltips should be enabled.\nsetPanning\tSpecifies if panning should be enabled.\nisEditing\tReturns true if the given cell is currently being edited.\nisAutoSizeCell\tReturns true if the size of the given cell should automatically be updated after a change of the label.\nisAutoSizeCells\tReturns autoSizeCells.\nsetAutoSizeCells\tSpecifies if cell sizes should be automatically updated after a label change.\nisExtendParent\tReturns true if the parent of the given cell should be extended if the child has been resized so that it overlaps the parent.\nisExtendParents\tReturns extendParents.\nsetExtendParents\tSets extendParents.\nisExtendParentsOnAdd\tReturns extendParentsOnAdd.\nsetExtendParentsOnAdd\tSets extendParentsOnAdd.\nisExtendParentsOnMove\tReturns <extendParentsOnMove>.\nsetExtendParentsOnMove\tSets <extendParentsOnMove>.\nisRecursiveResize\tReturns recursiveResize.\nsetRecursiveResize\tSets recursiveResize.\nisConstrainChild\tReturns true if the given cell should be kept inside the bounds of its parent according to the rules defined by getOverlap and isAllowOverlapParent.\nisConstrainChildren\tReturns constrainChildren.\nsetConstrainChildren\tSets constrainChildren.\nisConstrainRelativeChildren\tReturns constrainRelativeChildren.\nsetConstrainRelativeChildren\tSets constrainRelativeChildren.\nisConstrainChildren\tReturns allowNegativeCoordinates.\nsetConstrainChildren\tSets allowNegativeCoordinates.\ngetOverlap\tReturns a decimal number representing the amount of the width and height of the given cell that is allowed to overlap its parent.\nisAllowOverlapParent\tReturns true if the given cell is allowed to be placed outside of the parents area.\ngetFoldableCells\tReturns the cells which are movable in the given array of cells.\nisCellFoldable\tReturns true if the given cell is foldable.\nisValidDropTarget\tReturns true if the given cell is a valid drop target for the specified cells.\nisSplitTarget\tReturns true if the given edge may be splitted into two edges with the given cell as a new terminal between the two.\ngetDropTarget\tReturns the given cell if it is a drop target for the given cells or the nearest ancestor that may be used as a drop target for the given cells.\nCell retrieval\ngetDefaultParent\tReturns defaultParent or mxGraphView.currentRoot or the first child child of mxGraphModel.root if both are null.\nsetDefaultParent\tSets the defaultParent to the given cell.\ngetSwimlane\tReturns the nearest ancestor of the given cell which is a swimlane, or the given cell, if it is itself a swimlane.\ngetSwimlaneAt\tReturns the bottom-most swimlane that intersects the given point (x, y) in the cell hierarchy that starts at the given parent.\ngetCellAt\tReturns the bottom-most cell that intersects the given point (x, y) in the cell hierarchy starting at the given parent.\nintersects\tReturns the bottom-most cell that intersects the given point (x, y) in the cell hierarchy that starts at the given parent.\nhitsSwimlaneContent\tReturns true if the given coordinate pair is inside the content are of the given swimlane.\ngetChildVertices\tReturns the visible child vertices of the given parent.\ngetChildEdges\tReturns the visible child edges of the given parent.\ngetChildCells\tReturns the visible child vertices or edges in the given parent.\ngetConnections\tReturns all visible edges connected to the given cell without loops.\ngetIncomingEdges\tReturns the visible incoming edges for the given cell.\ngetOutgoingEdges\tReturns the visible outgoing edges for the given cell.\ngetEdges\tReturns the incoming and/or outgoing edges for the given cell.\nisValidAncestor\tReturns whether or not the specified parent is a valid ancestor of the specified cell, either direct or indirectly based on whether ancestor recursion is enabled.\ngetOpposites\tReturns all distinct visible opposite cells for the specified terminal on the given edges.\ngetEdgesBetween\tReturns the edges between the given source and target.\ngetPointForEvent\tReturns an mxPoint representing the given event in the unscaled, non-translated coordinate space of <container> and applies the grid.\ngetCells\tReturns the child vertices and edges of the given parent that are contained in the given rectangle.\ngetCellsBeyond\tReturns the children of the given parent that are contained in the halfpane from the given point (x0, y0) rightwards or downwards depending on rightHalfpane and bottomHalfpane.\nfindTreeRoots\tReturns all children in the given parent which do not have incoming edges.\ntraverse\tTraverses the (directed) graph invoking the given function for each visited vertex and edge.\nSelection\nisCellSelected\tReturns true if the given cell is selected.\nisSelectionEmpty\tReturns true if the selection is empty.\nclearSelection\tClears the selection using mxGraphSelectionModel.clear.\ngetSelectionCount\tReturns the number of selected cells.\ngetSelectionCell\tReturns the first cell from the array of selected mxCells.\ngetSelectionCells\tReturns the array of selected mxCells.\nsetSelectionCell\tSets the selection cell.\nsetSelectionCells\tSets the selection cell.\naddSelectionCell\tAdds the given cell to the selection.\naddSelectionCells\tAdds the given cells to the selection.\nremoveSelectionCell\tRemoves the given cell from the selection.\nremoveSelectionCells\tRemoves the given cells from the selection.\nselectRegion\tSelects and returns the cells inside the given rectangle for the specified event.\nselectNextCell\tSelects the next cell.\nselectPreviousCell\tSelects the previous cell.\nselectParentCell\tSelects the parent cell.\nselectChildCell\tSelects the first child cell.\nselectCell\tSelects the next, parent, first child or previous cell, if all arguments are false.\nselectAll\tSelects all children of the given parent cell or the children of the default parent if no parent is specified.\nselectVertices\tSelect all vertices inside the given parent or the default parent.\nselectVertices\tSelect all vertices inside the given parent or the default parent.\nselectCells\tSelects all vertices and/or edges depending on the given boolean arguments recursively, starting at the given parent or the default parent if no parent is specified.\nselectCellForEvent\tSelects the given cell by either adding it to the selection or replacing the selection depending on whether the given mouse event is a toggle event.\nselectCellsForEvent\tSelects the given cells by either adding them to the selection or replacing the selection depending on whether the given mouse event is a toggle event.\nSelection state\ncreateHandler\tCreates a new handler for the given cell state.\ncreateVertexHandler\tHooks to create a new mxVertexHandler for the given mxCellState.\ncreateEdgeHandler\tHooks to create a new mxEdgeHandler for the given mxCellState.\ncreateEdgeSegmentHandler\tHooks to create a new <mxEdgeSegmentHandler> for the given mxCellState.\ncreateElbowEdgeHandler\tHooks to create a new mxElbowEdgeHandler for the given mxCellState.\nGraph events\naddMouseListener\tAdds a listener to the graph event dispatch loop.\nremoveMouseListener\tRemoves the specified graph listener.\nupdateMouseEvent\tSets the graphX and graphY properties if the given mxMouseEvent if required and returned the event.\ngetStateForEvent\tReturns the state for the given touch event.\nisEventIgnored\tReturns true if the event should be ignored in fireMouseEvent.\nisSyntheticEventIgnored\tHook for ignoring synthetic mouse events after touchend in Firefox.\nisEventSourceIgnored\tReturns true if the event should be ignored in fireMouseEvent.\ngetEventState\tReturns the mxCellState to be used when firing the mouse event for the given state.\nfireMouseEvent\tDispatches the given event in the graph event dispatch loop.\nconsumeMouseEvent\tConsumes the given mxMouseEvent if it’s a touchStart event.\nfireGestureEvent\tDispatches a mxEvent.GESTURE event.\ndestroy\tDestroys the graph and all its resources.\n\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br"),n("span",{staticClass:"line-number"},[e._v("41")]),n("br"),n("span",{staticClass:"line-number"},[e._v("42")]),n("br"),n("span",{staticClass:"line-number"},[e._v("43")]),n("br"),n("span",{staticClass:"line-number"},[e._v("44")]),n("br"),n("span",{staticClass:"line-number"},[e._v("45")]),n("br"),n("span",{staticClass:"line-number"},[e._v("46")]),n("br"),n("span",{staticClass:"line-number"},[e._v("47")]),n("br"),n("span",{staticClass:"line-number"},[e._v("48")]),n("br"),n("span",{staticClass:"line-number"},[e._v("49")]),n("br"),n("span",{staticClass:"line-number"},[e._v("50")]),n("br"),n("span",{staticClass:"line-number"},[e._v("51")]),n("br"),n("span",{staticClass:"line-number"},[e._v("52")]),n("br"),n("span",{staticClass:"line-number"},[e._v("53")]),n("br"),n("span",{staticClass:"line-number"},[e._v("54")]),n("br"),n("span",{staticClass:"line-number"},[e._v("55")]),n("br"),n("span",{staticClass:"line-number"},[e._v("56")]),n("br"),n("span",{staticClass:"line-number"},[e._v("57")]),n("br"),n("span",{staticClass:"line-number"},[e._v("58")]),n("br"),n("span",{staticClass:"line-number"},[e._v("59")]),n("br"),n("span",{staticClass:"line-number"},[e._v("60")]),n("br"),n("span",{staticClass:"line-number"},[e._v("61")]),n("br"),n("span",{staticClass:"line-number"},[e._v("62")]),n("br"),n("span",{staticClass:"line-number"},[e._v("63")]),n("br"),n("span",{staticClass:"line-number"},[e._v("64")]),n("br"),n("span",{staticClass:"line-number"},[e._v("65")]),n("br"),n("span",{staticClass:"line-number"},[e._v("66")]),n("br"),n("span",{staticClass:"line-number"},[e._v("67")]),n("br"),n("span",{staticClass:"line-number"},[e._v("68")]),n("br"),n("span",{staticClass:"line-number"},[e._v("69")]),n("br"),n("span",{staticClass:"line-number"},[e._v("70")]),n("br"),n("span",{staticClass:"line-number"},[e._v("71")]),n("br"),n("span",{staticClass:"line-number"},[e._v("72")]),n("br"),n("span",{staticClass:"line-number"},[e._v("73")]),n("br"),n("span",{staticClass:"line-number"},[e._v("74")]),n("br"),n("span",{staticClass:"line-number"},[e._v("75")]),n("br"),n("span",{staticClass:"line-number"},[e._v("76")]),n("br"),n("span",{staticClass:"line-number"},[e._v("77")]),n("br"),n("span",{staticClass:"line-number"},[e._v("78")]),n("br"),n("span",{staticClass:"line-number"},[e._v("79")]),n("br"),n("span",{staticClass:"line-number"},[e._v("80")]),n("br"),n("span",{staticClass:"line-number"},[e._v("81")]),n("br"),n("span",{staticClass:"line-number"},[e._v("82")]),n("br"),n("span",{staticClass:"line-number"},[e._v("83")]),n("br"),n("span",{staticClass:"line-number"},[e._v("84")]),n("br"),n("span",{staticClass:"line-number"},[e._v("85")]),n("br"),n("span",{staticClass:"line-number"},[e._v("86")]),n("br"),n("span",{staticClass:"line-number"},[e._v("87")]),n("br"),n("span",{staticClass:"line-number"},[e._v("88")]),n("br"),n("span",{staticClass:"line-number"},[e._v("89")]),n("br"),n("span",{staticClass:"line-number"},[e._v("90")]),n("br"),n("span",{staticClass:"line-number"},[e._v("91")]),n("br"),n("span",{staticClass:"line-number"},[e._v("92")]),n("br"),n("span",{staticClass:"line-number"},[e._v("93")]),n("br"),n("span",{staticClass:"line-number"},[e._v("94")]),n("br"),n("span",{staticClass:"line-number"},[e._v("95")]),n("br"),n("span",{staticClass:"line-number"},[e._v("96")]),n("br"),n("span",{staticClass:"line-number"},[e._v("97")]),n("br"),n("span",{staticClass:"line-number"},[e._v("98")]),n("br"),n("span",{staticClass:"line-number"},[e._v("99")]),n("br"),n("span",{staticClass:"line-number"},[e._v("100")]),n("br"),n("span",{staticClass:"line-number"},[e._v("101")]),n("br"),n("span",{staticClass:"line-number"},[e._v("102")]),n("br"),n("span",{staticClass:"line-number"},[e._v("103")]),n("br"),n("span",{staticClass:"line-number"},[e._v("104")]),n("br"),n("span",{staticClass:"line-number"},[e._v("105")]),n("br"),n("span",{staticClass:"line-number"},[e._v("106")]),n("br"),n("span",{staticClass:"line-number"},[e._v("107")]),n("br"),n("span",{staticClass:"line-number"},[e._v("108")]),n("br"),n("span",{staticClass:"line-number"},[e._v("109")]),n("br"),n("span",{staticClass:"line-number"},[e._v("110")]),n("br"),n("span",{staticClass:"line-number"},[e._v("111")]),n("br"),n("span",{staticClass:"line-number"},[e._v("112")]),n("br"),n("span",{staticClass:"line-number"},[e._v("113")]),n("br"),n("span",{staticClass:"line-number"},[e._v("114")]),n("br"),n("span",{staticClass:"line-number"},[e._v("115")]),n("br"),n("span",{staticClass:"line-number"},[e._v("116")]),n("br"),n("span",{staticClass:"line-number"},[e._v("117")]),n("br"),n("span",{staticClass:"line-number"},[e._v("118")]),n("br"),n("span",{staticClass:"line-number"},[e._v("119")]),n("br"),n("span",{staticClass:"line-number"},[e._v("120")]),n("br"),n("span",{staticClass:"line-number"},[e._v("121")]),n("br"),n("span",{staticClass:"line-number"},[e._v("122")]),n("br"),n("span",{staticClass:"line-number"},[e._v("123")]),n("br"),n("span",{staticClass:"line-number"},[e._v("124")]),n("br"),n("span",{staticClass:"line-number"},[e._v("125")]),n("br"),n("span",{staticClass:"line-number"},[e._v("126")]),n("br"),n("span",{staticClass:"line-number"},[e._v("127")]),n("br"),n("span",{staticClass:"line-number"},[e._v("128")]),n("br"),n("span",{staticClass:"line-number"},[e._v("129")]),n("br"),n("span",{staticClass:"line-number"},[e._v("130")]),n("br"),n("span",{staticClass:"line-number"},[e._v("131")]),n("br"),n("span",{staticClass:"line-number"},[e._v("132")]),n("br"),n("span",{staticClass:"line-number"},[e._v("133")]),n("br"),n("span",{staticClass:"line-number"},[e._v("134")]),n("br"),n("span",{staticClass:"line-number"},[e._v("135")]),n("br"),n("span",{staticClass:"line-number"},[e._v("136")]),n("br"),n("span",{staticClass:"line-number"},[e._v("137")]),n("br"),n("span",{staticClass:"line-number"},[e._v("138")]),n("br"),n("span",{staticClass:"line-number"},[e._v("139")]),n("br"),n("span",{staticClass:"line-number"},[e._v("140")]),n("br"),n("span",{staticClass:"line-number"},[e._v("141")]),n("br"),n("span",{staticClass:"line-number"},[e._v("142")]),n("br"),n("span",{staticClass:"line-number"},[e._v("143")]),n("br"),n("span",{staticClass:"line-number"},[e._v("144")]),n("br"),n("span",{staticClass:"line-number"},[e._v("145")]),n("br"),n("span",{staticClass:"line-number"},[e._v("146")]),n("br"),n("span",{staticClass:"line-number"},[e._v("147")]),n("br"),n("span",{staticClass:"line-number"},[e._v("148")]),n("br"),n("span",{staticClass:"line-number"},[e._v("149")]),n("br"),n("span",{staticClass:"line-number"},[e._v("150")]),n("br"),n("span",{staticClass:"line-number"},[e._v("151")]),n("br"),n("span",{staticClass:"line-number"},[e._v("152")]),n("br"),n("span",{staticClass:"line-number"},[e._v("153")]),n("br"),n("span",{staticClass:"line-number"},[e._v("154")]),n("br"),n("span",{staticClass:"line-number"},[e._v("155")]),n("br"),n("span",{staticClass:"line-number"},[e._v("156")]),n("br"),n("span",{staticClass:"line-number"},[e._v("157")]),n("br"),n("span",{staticClass:"line-number"},[e._v("158")]),n("br"),n("span",{staticClass:"line-number"},[e._v("159")]),n("br"),n("span",{staticClass:"line-number"},[e._v("160")]),n("br"),n("span",{staticClass:"line-number"},[e._v("161")]),n("br"),n("span",{staticClass:"line-number"},[e._v("162")]),n("br"),n("span",{staticClass:"line-number"},[e._v("163")]),n("br"),n("span",{staticClass:"line-number"},[e._v("164")]),n("br"),n("span",{staticClass:"line-number"},[e._v("165")]),n("br"),n("span",{staticClass:"line-number"},[e._v("166")]),n("br"),n("span",{staticClass:"line-number"},[e._v("167")]),n("br"),n("span",{staticClass:"line-number"},[e._v("168")]),n("br"),n("span",{staticClass:"line-number"},[e._v("169")]),n("br"),n("span",{staticClass:"line-number"},[e._v("170")]),n("br"),n("span",{staticClass:"line-number"},[e._v("171")]),n("br"),n("span",{staticClass:"line-number"},[e._v("172")]),n("br"),n("span",{staticClass:"line-number"},[e._v("173")]),n("br"),n("span",{staticClass:"line-number"},[e._v("174")]),n("br"),n("span",{staticClass:"line-number"},[e._v("175")]),n("br"),n("span",{staticClass:"line-number"},[e._v("176")]),n("br"),n("span",{staticClass:"line-number"},[e._v("177")]),n("br"),n("span",{staticClass:"line-number"},[e._v("178")]),n("br"),n("span",{staticClass:"line-number"},[e._v("179")]),n("br"),n("span",{staticClass:"line-number"},[e._v("180")]),n("br"),n("span",{staticClass:"line-number"},[e._v("181")]),n("br"),n("span",{staticClass:"line-number"},[e._v("182")]),n("br"),n("span",{staticClass:"line-number"},[e._v("183")]),n("br"),n("span",{staticClass:"line-number"},[e._v("184")]),n("br"),n("span",{staticClass:"line-number"},[e._v("185")]),n("br"),n("span",{staticClass:"line-number"},[e._v("186")]),n("br"),n("span",{staticClass:"line-number"},[e._v("187")]),n("br"),n("span",{staticClass:"line-number"},[e._v("188")]),n("br"),n("span",{staticClass:"line-number"},[e._v("189")]),n("br"),n("span",{staticClass:"line-number"},[e._v("190")]),n("br"),n("span",{staticClass:"line-number"},[e._v("191")]),n("br"),n("span",{staticClass:"line-number"},[e._v("192")]),n("br"),n("span",{staticClass:"line-number"},[e._v("193")]),n("br"),n("span",{staticClass:"line-number"},[e._v("194")]),n("br"),n("span",{staticClass:"line-number"},[e._v("195")]),n("br"),n("span",{staticClass:"line-number"},[e._v("196")]),n("br"),n("span",{staticClass:"line-number"},[e._v("197")]),n("br"),n("span",{staticClass:"line-number"},[e._v("198")]),n("br"),n("span",{staticClass:"line-number"},[e._v("199")]),n("br"),n("span",{staticClass:"line-number"},[e._v("200")]),n("br"),n("span",{staticClass:"line-number"},[e._v("201")]),n("br"),n("span",{staticClass:"line-number"},[e._v("202")]),n("br"),n("span",{staticClass:"line-number"},[e._v("203")]),n("br"),n("span",{staticClass:"line-number"},[e._v("204")]),n("br"),n("span",{staticClass:"line-number"},[e._v("205")]),n("br"),n("span",{staticClass:"line-number"},[e._v("206")]),n("br"),n("span",{staticClass:"line-number"},[e._v("207")]),n("br"),n("span",{staticClass:"line-number"},[e._v("208")]),n("br"),n("span",{staticClass:"line-number"},[e._v("209")]),n("br"),n("span",{staticClass:"line-number"},[e._v("210")]),n("br"),n("span",{staticClass:"line-number"},[e._v("211")]),n("br"),n("span",{staticClass:"line-number"},[e._v("212")]),n("br"),n("span",{staticClass:"line-number"},[e._v("213")]),n("br"),n("span",{staticClass:"line-number"},[e._v("214")]),n("br"),n("span",{staticClass:"line-number"},[e._v("215")]),n("br"),n("span",{staticClass:"line-number"},[e._v("216")]),n("br"),n("span",{staticClass:"line-number"},[e._v("217")]),n("br"),n("span",{staticClass:"line-number"},[e._v("218")]),n("br"),n("span",{staticClass:"line-number"},[e._v("219")]),n("br"),n("span",{staticClass:"line-number"},[e._v("220")]),n("br"),n("span",{staticClass:"line-number"},[e._v("221")]),n("br"),n("span",{staticClass:"line-number"},[e._v("222")]),n("br"),n("span",{staticClass:"line-number"},[e._v("223")]),n("br"),n("span",{staticClass:"line-number"},[e._v("224")]),n("br"),n("span",{staticClass:"line-number"},[e._v("225")]),n("br"),n("span",{staticClass:"line-number"},[e._v("226")]),n("br"),n("span",{staticClass:"line-number"},[e._v("227")]),n("br"),n("span",{staticClass:"line-number"},[e._v("228")]),n("br"),n("span",{staticClass:"line-number"},[e._v("229")]),n("br"),n("span",{staticClass:"line-number"},[e._v("230")]),n("br"),n("span",{staticClass:"line-number"},[e._v("231")]),n("br"),n("span",{staticClass:"line-number"},[e._v("232")]),n("br"),n("span",{staticClass:"line-number"},[e._v("233")]),n("br"),n("span",{staticClass:"line-number"},[e._v("234")]),n("br"),n("span",{staticClass:"line-number"},[e._v("235")]),n("br"),n("span",{staticClass:"line-number"},[e._v("236")]),n("br"),n("span",{staticClass:"line-number"},[e._v("237")]),n("br"),n("span",{staticClass:"line-number"},[e._v("238")]),n("br"),n("span",{staticClass:"line-number"},[e._v("239")]),n("br"),n("span",{staticClass:"line-number"},[e._v("240")]),n("br"),n("span",{staticClass:"line-number"},[e._v("241")]),n("br"),n("span",{staticClass:"line-number"},[e._v("242")]),n("br"),n("span",{staticClass:"line-number"},[e._v("243")]),n("br"),n("span",{staticClass:"line-number"},[e._v("244")]),n("br"),n("span",{staticClass:"line-number"},[e._v("245")]),n("br"),n("span",{staticClass:"line-number"},[e._v("246")]),n("br"),n("span",{staticClass:"line-number"},[e._v("247")]),n("br"),n("span",{staticClass:"line-number"},[e._v("248")]),n("br"),n("span",{staticClass:"line-number"},[e._v("249")]),n("br"),n("span",{staticClass:"line-number"},[e._v("250")]),n("br"),n("span",{staticClass:"line-number"},[e._v("251")]),n("br"),n("span",{staticClass:"line-number"},[e._v("252")]),n("br"),n("span",{staticClass:"line-number"},[e._v("253")]),n("br"),n("span",{staticClass:"line-number"},[e._v("254")]),n("br"),n("span",{staticClass:"line-number"},[e._v("255")]),n("br"),n("span",{staticClass:"line-number"},[e._v("256")]),n("br"),n("span",{staticClass:"line-number"},[e._v("257")]),n("br"),n("span",{staticClass:"line-number"},[e._v("258")]),n("br"),n("span",{staticClass:"line-number"},[e._v("259")]),n("br"),n("span",{staticClass:"line-number"},[e._v("260")]),n("br"),n("span",{staticClass:"line-number"},[e._v("261")]),n("br"),n("span",{staticClass:"line-number"},[e._v("262")]),n("br"),n("span",{staticClass:"line-number"},[e._v("263")]),n("br"),n("span",{staticClass:"line-number"},[e._v("264")]),n("br"),n("span",{staticClass:"line-number"},[e._v("265")]),n("br"),n("span",{staticClass:"line-number"},[e._v("266")]),n("br"),n("span",{staticClass:"line-number"},[e._v("267")]),n("br"),n("span",{staticClass:"line-number"},[e._v("268")]),n("br"),n("span",{staticClass:"line-number"},[e._v("269")]),n("br"),n("span",{staticClass:"line-number"},[e._v("270")]),n("br"),n("span",{staticClass:"line-number"},[e._v("271")]),n("br"),n("span",{staticClass:"line-number"},[e._v("272")]),n("br"),n("span",{staticClass:"line-number"},[e._v("273")]),n("br"),n("span",{staticClass:"line-number"},[e._v("274")]),n("br"),n("span",{staticClass:"line-number"},[e._v("275")]),n("br"),n("span",{staticClass:"line-number"},[e._v("276")]),n("br"),n("span",{staticClass:"line-number"},[e._v("277")]),n("br"),n("span",{staticClass:"line-number"},[e._v("278")]),n("br"),n("span",{staticClass:"line-number"},[e._v("279")]),n("br"),n("span",{staticClass:"line-number"},[e._v("280")]),n("br"),n("span",{staticClass:"line-number"},[e._v("281")]),n("br"),n("span",{staticClass:"line-number"},[e._v("282")]),n("br"),n("span",{staticClass:"line-number"},[e._v("283")]),n("br"),n("span",{staticClass:"line-number"},[e._v("284")]),n("br"),n("span",{staticClass:"line-number"},[e._v("285")]),n("br"),n("span",{staticClass:"line-number"},[e._v("286")]),n("br"),n("span",{staticClass:"line-number"},[e._v("287")]),n("br"),n("span",{staticClass:"line-number"},[e._v("288")]),n("br"),n("span",{staticClass:"line-number"},[e._v("289")]),n("br"),n("span",{staticClass:"line-number"},[e._v("290")]),n("br"),n("span",{staticClass:"line-number"},[e._v("291")]),n("br"),n("span",{staticClass:"line-number"},[e._v("292")]),n("br"),n("span",{staticClass:"line-number"},[e._v("293")]),n("br"),n("span",{staticClass:"line-number"},[e._v("294")]),n("br"),n("span",{staticClass:"line-number"},[e._v("295")]),n("br"),n("span",{staticClass:"line-number"},[e._v("296")]),n("br"),n("span",{staticClass:"line-number"},[e._v("297")]),n("br"),n("span",{staticClass:"line-number"},[e._v("298")]),n("br"),n("span",{staticClass:"line-number"},[e._v("299")]),n("br"),n("span",{staticClass:"line-number"},[e._v("300")]),n("br"),n("span",{staticClass:"line-number"},[e._v("301")]),n("br"),n("span",{staticClass:"line-number"},[e._v("302")]),n("br"),n("span",{staticClass:"line-number"},[e._v("303")]),n("br"),n("span",{staticClass:"line-number"},[e._v("304")]),n("br"),n("span",{staticClass:"line-number"},[e._v("305")]),n("br"),n("span",{staticClass:"line-number"},[e._v("306")]),n("br"),n("span",{staticClass:"line-number"},[e._v("307")]),n("br"),n("span",{staticClass:"line-number"},[e._v("308")]),n("br"),n("span",{staticClass:"line-number"},[e._v("309")]),n("br"),n("span",{staticClass:"line-number"},[e._v("310")]),n("br"),n("span",{staticClass:"line-number"},[e._v("311")]),n("br"),n("span",{staticClass:"line-number"},[e._v("312")]),n("br"),n("span",{staticClass:"line-number"},[e._v("313")]),n("br"),n("span",{staticClass:"line-number"},[e._v("314")]),n("br"),n("span",{staticClass:"line-number"},[e._v("315")]),n("br"),n("span",{staticClass:"line-number"},[e._v("316")]),n("br"),n("span",{staticClass:"line-number"},[e._v("317")]),n("br"),n("span",{staticClass:"line-number"},[e._v("318")]),n("br"),n("span",{staticClass:"line-number"},[e._v("319")]),n("br"),n("span",{staticClass:"line-number"},[e._v("320")]),n("br"),n("span",{staticClass:"line-number"},[e._v("321")]),n("br"),n("span",{staticClass:"line-number"},[e._v("322")]),n("br"),n("span",{staticClass:"line-number"},[e._v("323")]),n("br"),n("span",{staticClass:"line-number"},[e._v("324")]),n("br"),n("span",{staticClass:"line-number"},[e._v("325")]),n("br"),n("span",{staticClass:"line-number"},[e._v("326")]),n("br"),n("span",{staticClass:"line-number"},[e._v("327")]),n("br"),n("span",{staticClass:"line-number"},[e._v("328")]),n("br"),n("span",{staticClass:"line-number"},[e._v("329")]),n("br"),n("span",{staticClass:"line-number"},[e._v("330")]),n("br"),n("span",{staticClass:"line-number"},[e._v("331")]),n("br"),n("span",{staticClass:"line-number"},[e._v("332")]),n("br"),n("span",{staticClass:"line-number"},[e._v("333")]),n("br"),n("span",{staticClass:"line-number"},[e._v("334")]),n("br"),n("span",{staticClass:"line-number"},[e._v("335")]),n("br"),n("span",{staticClass:"line-number"},[e._v("336")]),n("br"),n("span",{staticClass:"line-number"},[e._v("337")]),n("br"),n("span",{staticClass:"line-number"},[e._v("338")]),n("br"),n("span",{staticClass:"line-number"},[e._v("339")]),n("br"),n("span",{staticClass:"line-number"},[e._v("340")]),n("br"),n("span",{staticClass:"line-number"},[e._v("341")]),n("br"),n("span",{staticClass:"line-number"},[e._v("342")]),n("br"),n("span",{staticClass:"line-number"},[e._v("343")]),n("br"),n("span",{staticClass:"line-number"},[e._v("344")]),n("br"),n("span",{staticClass:"line-number"},[e._v("345")]),n("br"),n("span",{staticClass:"line-number"},[e._v("346")]),n("br"),n("span",{staticClass:"line-number"},[e._v("347")]),n("br"),n("span",{staticClass:"line-number"},[e._v("348")]),n("br"),n("span",{staticClass:"line-number"},[e._v("349")]),n("br"),n("span",{staticClass:"line-number"},[e._v("350")]),n("br"),n("span",{staticClass:"line-number"},[e._v("351")]),n("br"),n("span",{staticClass:"line-number"},[e._v("352")]),n("br"),n("span",{staticClass:"line-number"},[e._v("353")]),n("br"),n("span",{staticClass:"line-number"},[e._v("354")]),n("br"),n("span",{staticClass:"line-number"},[e._v("355")]),n("br"),n("span",{staticClass:"line-number"},[e._v("356")]),n("br"),n("span",{staticClass:"line-number"},[e._v("357")]),n("br"),n("span",{staticClass:"line-number"},[e._v("358")]),n("br"),n("span",{staticClass:"line-number"},[e._v("359")]),n("br"),n("span",{staticClass:"line-number"},[e._v("360")]),n("br"),n("span",{staticClass:"line-number"},[e._v("361")]),n("br"),n("span",{staticClass:"line-number"},[e._v("362")]),n("br"),n("span",{staticClass:"line-number"},[e._v("363")]),n("br"),n("span",{staticClass:"line-number"},[e._v("364")]),n("br"),n("span",{staticClass:"line-number"},[e._v("365")]),n("br"),n("span",{staticClass:"line-number"},[e._v("366")]),n("br"),n("span",{staticClass:"line-number"},[e._v("367")]),n("br"),n("span",{staticClass:"line-number"},[e._v("368")]),n("br"),n("span",{staticClass:"line-number"},[e._v("369")]),n("br"),n("span",{staticClass:"line-number"},[e._v("370")]),n("br"),n("span",{staticClass:"line-number"},[e._v("371")]),n("br"),n("span",{staticClass:"line-number"},[e._v("372")]),n("br"),n("span",{staticClass:"line-number"},[e._v("373")]),n("br"),n("span",{staticClass:"line-number"},[e._v("374")]),n("br"),n("span",{staticClass:"line-number"},[e._v("375")]),n("br"),n("span",{staticClass:"line-number"},[e._v("376")]),n("br"),n("span",{staticClass:"line-number"},[e._v("377")]),n("br"),n("span",{staticClass:"line-number"},[e._v("378")]),n("br"),n("span",{staticClass:"line-number"},[e._v("379")]),n("br"),n("span",{staticClass:"line-number"},[e._v("380")]),n("br"),n("span",{staticClass:"line-number"},[e._v("381")]),n("br"),n("span",{staticClass:"line-number"},[e._v("382")]),n("br"),n("span",{staticClass:"line-number"},[e._v("383")]),n("br"),n("span",{staticClass:"line-number"},[e._v("384")]),n("br"),n("span",{staticClass:"line-number"},[e._v("385")]),n("br"),n("span",{staticClass:"line-number"},[e._v("386")]),n("br"),n("span",{staticClass:"line-number"},[e._v("387")]),n("br"),n("span",{staticClass:"line-number"},[e._v("388")]),n("br"),n("span",{staticClass:"line-number"},[e._v("389")]),n("br"),n("span",{staticClass:"line-number"},[e._v("390")]),n("br"),n("span",{staticClass:"line-number"},[e._v("391")]),n("br"),n("span",{staticClass:"line-number"},[e._v("392")]),n("br"),n("span",{staticClass:"line-number"},[e._v("393")]),n("br"),n("span",{staticClass:"line-number"},[e._v("394")]),n("br"),n("span",{staticClass:"line-number"},[e._v("395")]),n("br"),n("span",{staticClass:"line-number"},[e._v("396")]),n("br"),n("span",{staticClass:"line-number"},[e._v("397")]),n("br"),n("span",{staticClass:"line-number"},[e._v("398")]),n("br"),n("span",{staticClass:"line-number"},[e._v("399")]),n("br"),n("span",{staticClass:"line-number"},[e._v("400")]),n("br"),n("span",{staticClass:"line-number"},[e._v("401")]),n("br"),n("span",{staticClass:"line-number"},[e._v("402")]),n("br"),n("span",{staticClass:"line-number"},[e._v("403")]),n("br"),n("span",{staticClass:"line-number"},[e._v("404")]),n("br"),n("span",{staticClass:"line-number"},[e._v("405")]),n("br"),n("span",{staticClass:"line-number"},[e._v("406")]),n("br"),n("span",{staticClass:"line-number"},[e._v("407")]),n("br"),n("span",{staticClass:"line-number"},[e._v("408")]),n("br"),n("span",{staticClass:"line-number"},[e._v("409")]),n("br"),n("span",{staticClass:"line-number"},[e._v("410")]),n("br"),n("span",{staticClass:"line-number"},[e._v("411")]),n("br"),n("span",{staticClass:"line-number"},[e._v("412")]),n("br"),n("span",{staticClass:"line-number"},[e._v("413")]),n("br"),n("span",{staticClass:"line-number"},[e._v("414")]),n("br"),n("span",{staticClass:"line-number"},[e._v("415")]),n("br"),n("span",{staticClass:"line-number"},[e._v("416")]),n("br"),n("span",{staticClass:"line-number"},[e._v("417")]),n("br"),n("span",{staticClass:"line-number"},[e._v("418")]),n("br"),n("span",{staticClass:"line-number"},[e._v("419")]),n("br"),n("span",{staticClass:"line-number"},[e._v("420")]),n("br"),n("span",{staticClass:"line-number"},[e._v("421")]),n("br"),n("span",{staticClass:"line-number"},[e._v("422")]),n("br"),n("span",{staticClass:"line-number"},[e._v("423")]),n("br"),n("span",{staticClass:"line-number"},[e._v("424")]),n("br"),n("span",{staticClass:"line-number"},[e._v("425")]),n("br"),n("span",{staticClass:"line-number"},[e._v("426")]),n("br"),n("span",{staticClass:"line-number"},[e._v("427")]),n("br"),n("span",{staticClass:"line-number"},[e._v("428")]),n("br"),n("span",{staticClass:"line-number"},[e._v("429")]),n("br"),n("span",{staticClass:"line-number"},[e._v("430")]),n("br"),n("span",{staticClass:"line-number"},[e._v("431")]),n("br"),n("span",{staticClass:"line-number"},[e._v("432")]),n("br"),n("span",{staticClass:"line-number"},[e._v("433")]),n("br"),n("span",{staticClass:"line-number"},[e._v("434")]),n("br"),n("span",{staticClass:"line-number"},[e._v("435")]),n("br"),n("span",{staticClass:"line-number"},[e._v("436")]),n("br"),n("span",{staticClass:"line-number"},[e._v("437")]),n("br"),n("span",{staticClass:"line-number"},[e._v("438")]),n("br"),n("span",{staticClass:"line-number"},[e._v("439")]),n("br"),n("span",{staticClass:"line-number"},[e._v("440")]),n("br"),n("span",{staticClass:"line-number"},[e._v("441")]),n("br"),n("span",{staticClass:"line-number"},[e._v("442")]),n("br"),n("span",{staticClass:"line-number"},[e._v("443")]),n("br"),n("span",{staticClass:"line-number"},[e._v("444")]),n("br"),n("span",{staticClass:"line-number"},[e._v("445")]),n("br"),n("span",{staticClass:"line-number"},[e._v("446")]),n("br"),n("span",{staticClass:"line-number"},[e._v("447")]),n("br"),n("span",{staticClass:"line-number"},[e._v("448")]),n("br"),n("span",{staticClass:"line-number"},[e._v("449")]),n("br"),n("span",{staticClass:"line-number"},[e._v("450")]),n("br"),n("span",{staticClass:"line-number"},[e._v("451")]),n("br"),n("span",{staticClass:"line-number"},[e._v("452")]),n("br"),n("span",{staticClass:"line-number"},[e._v("453")]),n("br"),n("span",{staticClass:"line-number"},[e._v("454")]),n("br"),n("span",{staticClass:"line-number"},[e._v("455")]),n("br"),n("span",{staticClass:"line-number"},[e._v("456")]),n("br"),n("span",{staticClass:"line-number"},[e._v("457")]),n("br"),n("span",{staticClass:"line-number"},[e._v("458")]),n("br"),n("span",{staticClass:"line-number"},[e._v("459")]),n("br"),n("span",{staticClass:"line-number"},[e._v("460")]),n("br"),n("span",{staticClass:"line-number"},[e._v("461")]),n("br"),n("span",{staticClass:"line-number"},[e._v("462")]),n("br"),n("span",{staticClass:"line-number"},[e._v("463")]),n("br"),n("span",{staticClass:"line-number"},[e._v("464")]),n("br"),n("span",{staticClass:"line-number"},[e._v("465")]),n("br"),n("span",{staticClass:"line-number"},[e._v("466")]),n("br"),n("span",{staticClass:"line-number"},[e._v("467")]),n("br"),n("span",{staticClass:"line-number"},[e._v("468")]),n("br"),n("span",{staticClass:"line-number"},[e._v("469")]),n("br"),n("span",{staticClass:"line-number"},[e._v("470")]),n("br"),n("span",{staticClass:"line-number"},[e._v("471")]),n("br"),n("span",{staticClass:"line-number"},[e._v("472")]),n("br"),n("span",{staticClass:"line-number"},[e._v("473")]),n("br"),n("span",{staticClass:"line-number"},[e._v("474")]),n("br"),n("span",{staticClass:"line-number"},[e._v("475")]),n("br"),n("span",{staticClass:"line-number"},[e._v("476")]),n("br"),n("span",{staticClass:"line-number"},[e._v("477")]),n("br"),n("span",{staticClass:"line-number"},[e._v("478")]),n("br"),n("span",{staticClass:"line-number"},[e._v("479")]),n("br"),n("span",{staticClass:"line-number"},[e._v("480")]),n("br"),n("span",{staticClass:"line-number"},[e._v("481")]),n("br"),n("span",{staticClass:"line-number"},[e._v("482")]),n("br"),n("span",{staticClass:"line-number"},[e._v("483")]),n("br"),n("span",{staticClass:"line-number"},[e._v("484")]),n("br"),n("span",{staticClass:"line-number"},[e._v("485")]),n("br"),n("span",{staticClass:"line-number"},[e._v("486")]),n("br"),n("span",{staticClass:"line-number"},[e._v("487")]),n("br"),n("span",{staticClass:"line-number"},[e._v("488")]),n("br"),n("span",{staticClass:"line-number"},[e._v("489")]),n("br"),n("span",{staticClass:"line-number"},[e._v("490")]),n("br"),n("span",{staticClass:"line-number"},[e._v("491")]),n("br"),n("span",{staticClass:"line-number"},[e._v("492")]),n("br"),n("span",{staticClass:"line-number"},[e._v("493")]),n("br"),n("span",{staticClass:"line-number"},[e._v("494")]),n("br"),n("span",{staticClass:"line-number"},[e._v("495")]),n("br"),n("span",{staticClass:"line-number"},[e._v("496")]),n("br"),n("span",{staticClass:"line-number"},[e._v("497")]),n("br"),n("span",{staticClass:"line-number"},[e._v("498")]),n("br"),n("span",{staticClass:"line-number"},[e._v("499")]),n("br"),n("span",{staticClass:"line-number"},[e._v("500")]),n("br"),n("span",{staticClass:"line-number"},[e._v("501")]),n("br"),n("span",{staticClass:"line-number"},[e._v("502")]),n("br"),n("span",{staticClass:"line-number"},[e._v("503")]),n("br"),n("span",{staticClass:"line-number"},[e._v("504")]),n("br"),n("span",{staticClass:"line-number"},[e._v("505")]),n("br"),n("span",{staticClass:"line-number"},[e._v("506")]),n("br"),n("span",{staticClass:"line-number"},[e._v("507")]),n("br"),n("span",{staticClass:"line-number"},[e._v("508")]),n("br"),n("span",{staticClass:"line-number"},[e._v("509")]),n("br"),n("span",{staticClass:"line-number"},[e._v("510")]),n("br"),n("span",{staticClass:"line-number"},[e._v("511")]),n("br"),n("span",{staticClass:"line-number"},[e._v("512")]),n("br"),n("span",{staticClass:"line-number"},[e._v("513")]),n("br"),n("span",{staticClass:"line-number"},[e._v("514")]),n("br"),n("span",{staticClass:"line-number"},[e._v("515")]),n("br"),n("span",{staticClass:"line-number"},[e._v("516")]),n("br"),n("span",{staticClass:"line-number"},[e._v("517")]),n("br"),n("span",{staticClass:"line-number"},[e._v("518")]),n("br"),n("span",{staticClass:"line-number"},[e._v("519")]),n("br"),n("span",{staticClass:"line-number"},[e._v("520")]),n("br"),n("span",{staticClass:"line-number"},[e._v("521")]),n("br"),n("span",{staticClass:"line-number"},[e._v("522")]),n("br"),n("span",{staticClass:"line-number"},[e._v("523")]),n("br"),n("span",{staticClass:"line-number"},[e._v("524")]),n("br"),n("span",{staticClass:"line-number"},[e._v("525")]),n("br"),n("span",{staticClass:"line-number"},[e._v("526")]),n("br"),n("span",{staticClass:"line-number"},[e._v("527")]),n("br"),n("span",{staticClass:"line-number"},[e._v("528")]),n("br"),n("span",{staticClass:"line-number"},[e._v("529")]),n("br"),n("span",{staticClass:"line-number"},[e._v("530")]),n("br"),n("span",{staticClass:"line-number"},[e._v("531")]),n("br"),n("span",{staticClass:"line-number"},[e._v("532")]),n("br"),n("span",{staticClass:"line-number"},[e._v("533")]),n("br"),n("span",{staticClass:"line-number"},[e._v("534")]),n("br"),n("span",{staticClass:"line-number"},[e._v("535")]),n("br"),n("span",{staticClass:"line-number"},[e._v("536")]),n("br"),n("span",{staticClass:"line-number"},[e._v("537")]),n("br"),n("span",{staticClass:"line-number"},[e._v("538")]),n("br"),n("span",{staticClass:"line-number"},[e._v("539")]),n("br"),n("span",{staticClass:"line-number"},[e._v("540")]),n("br"),n("span",{staticClass:"line-number"},[e._v("541")]),n("br"),n("span",{staticClass:"line-number"},[e._v("542")]),n("br"),n("span",{staticClass:"line-number"},[e._v("543")]),n("br"),n("span",{staticClass:"line-number"},[e._v("544")]),n("br"),n("span",{staticClass:"line-number"},[e._v("545")]),n("br"),n("span",{staticClass:"line-number"},[e._v("546")]),n("br"),n("span",{staticClass:"line-number"},[e._v("547")]),n("br"),n("span",{staticClass:"line-number"},[e._v("548")]),n("br"),n("span",{staticClass:"line-number"},[e._v("549")]),n("br"),n("span",{staticClass:"line-number"},[e._v("550")]),n("br"),n("span",{staticClass:"line-number"},[e._v("551")]),n("br")])])])}),[],!1,null,null,null);t.default=a.exports}}]);